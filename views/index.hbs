{{#section 'css'}}
<style>
  .carousel {
  width:300px;
  height: 200px;
  }
</style>
{{/section}}
<input id="pac-input" class="controls" type="text" placeholder="Search Box">
<div id="map"></div>
<div id="infowindow-content">
  <img id="place-icon" src="" height="16" width="16">
  <span id="place-name" class="title"></span><br> Place ID <span id="place-id"></span><br>
  <span id="place-address"></span>
</div>
<img id="photo">
<div class="content">
  <div class="row">
    <div class="col-sm-6 col-md-6 col-lg-6">
      <h3> Khu vực lân cận</h3>
      <div id="locNearby"></div>
    </div>
    <div class="col-sm-6 col-md-6 col-lg-6">
      <h3> Thông tin địa điểm</h3>
      <div id="locDetail"></div>
      <div id="myCarousel" class="carousel slide" data-ride="carousel">
        <!-- Indicators -->
        <ol class="carousel-indicators" id="carousel-indicator">
        </ol>

        <!-- Wrapper for slides -->
        <div class="carousel-inner" id="carousel-inner">
          
        </div>

        <!-- Left and right controls -->
        <a class="left carousel-control" href="#myCarousel" data-slide="prev">
    <span class="glyphicon glyphicon-chevron-left"></span>
    <span class="sr-only">Previous</span>
  </a>
        <a class="right carousel-control" href="#myCarousel" data-slide="next">
    <span class="glyphicon glyphicon-chevron-right"></span>
    <span class="sr-only">Next</span>
  </a>
      </div>
    </div>
  </div>
</div>
{{#section 'js'}}
<script>
  function initAutocomplete() {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: { lat: -33.8688, lng: 151.2195 },
      zoom: 13,
      mapTypeId: 'roadmap'
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function () {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    //start
    searchBox.addListener('places_changed', function () {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function (marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();


      places.forEach(function (place) {
        if (!place.geometry) {
          return;
        }
        this.setPlaceDetail(place);

        var latLong = JSON.stringify(place.geometry.location);
        var latLongObj = JSON.parse(latLong);
        this.getLocationByInstagram(latLongObj.lat, latLongObj.lng);
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);

    });
    //end
    var geocoder = new google.maps.Geocoder;
    var infoWindow = new google.maps.InfoWindow;
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(function (position) {
        var pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        geocoder.geocode({ 'location': pos }, function (results, status) {
          if (status === 'OK') {
            if (results[0]) {
              map.setZoom(17);
              var marker = new google.maps.Marker({
                position: pos,
                map: map
              });
              var infoWindowPos = new google.maps.InfoWindow;
              infoWindowPos.setContent(results[0].formatted_address);
              infoWindowPos.open(map, marker);

            } else {
              window.alert('No results found');
            }
          } else {
            window.alert('Geocoder failed due to: ' + status);
          }
        });

        map.setCenter(pos);
        var clickHandler = new ClickEventHandler(map, infoWindow, pos);
      }, function () {
        handleLocationError(true, infoWindow, map.getCenter());
      });
    } else {
      // Browser doesn't support Geolocation
      handleLocationError(false, infoWindow, map.getCenter());
    }
    google.maps.event.addListener(map, 'click', function (event) {

      geocodeLatLng(geocoder, map, infoWindow, event.latLng);
    });
  }

  function handleLocationError(browserHasGeolocation, infoWindow, pos) {
    infoWindow.setPosition(pos);
    infoWindow.setContent(browserHasGeolocation ?
      'Error: The Geolocation service failed.' :
      'Error: Your browser doesn\'t support geolocation.');
    infoWindow.open(map);
  }


  var lastMaker;
  function geocodeLatLng(geocoder, map, infowindow, latlng) {
    if (lastMaker) {
      lastMaker.setMap(null);
    }
    geocoder.geocode({ 'location': latlng }, function (results, status) {
      if (status === 'OK') {
        if (results[0]) {
          map.setZoom(17);
          var marker = new google.maps.Marker({
            position: latlng,
            map: map
          });
          infowindow.setContent(results[0].formatted_address);
          infowindow.open(map, marker);
          lastMaker = marker;
        } else {
          window.alert('No results found');
        }
      } else {
        window.alert('Geocoder failed due to: ' + status);
      }
    });
  }


  var ClickEventHandler = function (map, infoWindow, origin) {
    this.origin = origin;
    this.map = map;
    this.travelMode = 'WALKING';

    this.placesService = new google.maps.places.PlacesService(map);
    this.infowindow = infoWindow;
    this.infowindowContent = document.getElementById('infowindow-content');
    this.infowindow.setContent(this.infowindowContent);

    // Listen for clicks on the map.
    this.map.addListener('click', this.handleClick.bind(this));
  };


  ClickEventHandler.prototype.handleClick = function (event) {
    if (event.placeId) {
      event.stop();
      this.placeId = event.placeId;
      this.getPlaceInformation(event.placeId);
    }
  };

  ClickEventHandler.prototype.getPlaceInformation = function (placeId) {
    this.placesService.getDetails({ placeId: placeId }, function (place, status) {
      if (status === 'OK') {
        var latLong = JSON.stringify(place.geometry.location);
        var latLongObj = JSON.parse(latLong);
        var stringData = JSON.stringify(place);
        var jsonData = JSON.parse(stringData);
          this.setPlaceDetail(place);
          getLocationByInstagram(latLongObj.lat, latLongObj.lng);
          this.infowindow.close();
        this.infowindow.setPosition(place.geometry.location);
        this.infowindowContent.children['place-icon'].src = place.icon;
        this.infowindowContent.children['place-name'].textContent = place.name;
        this.infowindowContent.children['place-id'].textContent = place.place_id;
        this.infowindowContent.children['place-address'].textContent = place.formatted_address;
        this.infowindow.open(this.map);
        }
      });

  };

  function setPlaceDetail(place) {
    console.log('hehe',place);
    var htmlString = '<ul>'
    htmlString += '<li>Địa chỉ: ' + place.formatted_address + '</li>';
    htmlString += '<li>Tên địa điểm: ' + place.name + '</li>';
    htmlString += '<li>Đánh giá:' + place.rating + '</li>'
  if (!place.photos) {
    $('#myCarousel').hide();
    return; 
  } else {
    $('#myCarousel').show();
    var photos = place.photos;
    indicatorString = "";
    innerString ="";
    //first photo
    indicatorString += '<li data-target="#myCarousel" data-slide-to="0" class="active"></li>';
    var fistUrl = photos[0].getUrl({ 'maxWidth': 300, 'maxHeight': 250 });
    innerString+='<div class="item active"><img src="'+fistUrl+'" alt="Los Angeles"></div>';

    for (var i=1; i<photos.length; i++) {
      indicatorString += '<li data-target="#myCarousel" data-slide-to="'+i+'"></li>';
      var url = photos[i].getUrl({ 'maxWidth': 300, 'maxHeight': 250 });
      innerString+='<div class="item"><img src="'+url+'"></div>';        
    }
    $('#carousel-indicator').html(indicatorString);
    $('#carousel-inner').html(innerString);
  }
    
    $('#locDetail').html(htmlString);
  }

  var ACCESS_TOKEN = "3446550202.5db9b6c.490ba682f10b48918f84abbbcc32592b";
  function getLocationByInstagram(lat, long) {
    console.log(lat, long);
    $.ajax({
      type: "GET",
      url: "https://api.instagram.com/v1/locations/search?lat=" + lat + "&lng=" + long + "&access_token=" + ACCESS_TOKEN + "&callback=?",
      dataType: "jsonp",
      success: function (resultData) {
        var stringData = JSON.stringify(resultData);
        var jsonData = JSON.parse(stringData);
        console.log(jsonData.data.length);
        showMedia(jsonData.data);
      }
    });
  };

  function showMedia(data) {
    if (data.length > 0) {
      var htmlString = '<ul>'
      for (var i = 0; i < data.length; i++) {
        htmlString += '<li>' + data[i].name + '</li>';
      }
      htmlString += "</ul>";

      $('#locNearby').html(htmlString);
    }
  }

</script>
{{/section}}